plugins {
    id 'com.android.application'
    id 'org.jetbrains.kotlin.android'
    id 'com.google.android.libraries.mapsplatform.secrets-gradle-plugin'
    id 'com.google.gms.google-services'
    id 'kotlin-android'
    id 'kotlin-kapt'
    id 'com.google.devtools.ksp'
    id 'com.google.dagger.hilt.android'
    //id 'androidx.navigation.safeargs.kotlin'
}

android {
    namespace 'ua.com.programmer.simpleremote'
    compileSdk 35
    def _patch
    def versionPropsFile = file("version.properties")
    if (versionPropsFile.canRead()) {
        Properties versionProps = new Properties()
        versionProps.load(new FileInputStream(versionPropsFile))
        _patch = versionProps['PATCH'].toInteger() + 1
        versionProps['PATCH'] = _patch.toString()
        versionProps.store(versionPropsFile.newWriter(), null)
    } else {
        throw new Exception("Could not read version.properties!")
        //_patch = "E"
    }
    def _versionName = "0." + _patch
    defaultConfig {
        applicationId "ua.com.programmer.simpleremote"
        minSdk 23
        targetSdk 35
        versionName _versionName
        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
        vectorDrawables {
            useSupportLibrary true
        }
    }
    buildTypes {
        release {
            minifyEnabled true
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
        debug {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
    }
    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }
    flavorDimensions = ["version"]
    productFlavors {
        full {
            dimension "version"
            versionCode _patch
            versionName _versionName + '.f'
        }
        standart {
            dimension "version"
            versionCode _patch
            versionName _versionName + '.s'
        }
    }
    buildFeatures {
        //compose true
        buildConfig true
    }
    kotlinOptions {
        jvmTarget = '1.8'
    }
//    buildToolsVersion '31.0.0'
}

dependencies {
    implementation fileTree(include: ['*.jar'], dir: 'libs')
    implementation 'androidx.appcompat:appcompat:1.7.0'
    implementation 'androidx.legacy:legacy-support-v4:1.0.0'
    implementation 'com.google.android.material:material:1.12.0'
    implementation 'androidx.constraintlayout:constraintlayout:2.2.0'
    implementation 'androidx.cardview:cardview:1.0.0'
    implementation 'androidx.recyclerview:recyclerview:1.4.0'
    implementation 'androidx.core:core-ktx:1.15.0'
    testImplementation 'junit:junit:4.13.2'
    androidTestImplementation 'androidx.test:runner:1.6.2'
    androidTestImplementation 'androidx.test.espresso:espresso-core:3.6.1'

    //volley
    implementation 'com.android.volley:volley:1.2.1'
    //glide
    implementation 'com.github.bumptech.glide:glide:4.16.0'

    // CameraX dependencies
    def camerax_version = "1.4.1"
    implementation "androidx.camera:camera-camera2:${camerax_version}"
    implementation "androidx.camera:camera-lifecycle:${camerax_version}"
    implementation "androidx.camera:camera-view:${camerax_version}"

    implementation 'com.google.mlkit:barcode-scanning:17.3.0'

    //Firebase
    implementation platform('com.google.firebase:firebase-bom:33.8.0')
    //implementation 'com.google.firebase:firebase-core:20.0.0'
    implementation 'com.google.firebase:firebase-firestore'
    implementation 'com.google.firebase:firebase-auth'
    implementation 'com.google.firebase:firebase-crashlytics'
    implementation 'com.google.firebase:firebase-analytics'

    // Hilt
    implementation 'com.google.dagger:hilt-android:2.54'
    ksp 'com.google.dagger:hilt-compiler:2.54'
    implementation 'androidx.hilt:hilt-navigation-compose:1.2.0'
}

apply plugin: 'com.google.gms.google-services'
apply plugin: 'com.google.firebase.crashlytics'
apply plugin: 'org.jetbrains.kotlin.android'